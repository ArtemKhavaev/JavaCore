CREATE TABLE atricle (
article_id serial PRIMARY KEY,
title VARCHAR (100) NOT NULL,
added TIMESTAMP NOT NULL
);

/*
МНОГОСТРОЧНЫЕ КОМЕНТЫ
*/

-- ОДНОСТРОЧНЫЕ КОМЕНТЫ


-- СОЗДАНИЕ ТАБЛИЦ
CREATE TABLE IF NOT EXISTS author(
   author_id serial PRIMARY KEY,
   name VARCHAR (50) NOT NULL,
    age INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS article(
	article_id serial PRIMARY KEY,
	title VARCHAR (50) UNIQUE NOT NULL,
	text TEXT NOT NULL,
	created_on TIMESTAMP NOT NULL,
	author_id INTEGER NOT NULL,
	CONSTRAINT author_article FOREIGN KEY (author_id)
	REFERENCES author(author_id)
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS nomination(
   nomination_id serial PRIMARY KEY,
   name VARCHAR (150) NOT NULL
);

CREATE TYPE rate AS ENUM ('first', 'second', 'third');

CREATE TABLE IF NOT EXISTS nomination_article
(
  nomination_id integer NOT NULL,
  article_id integer NOT NULL,
  rating rate,
  PRIMARY KEY (nomination_id, article_id),
  CONSTRAINT nomination_fk FOREIGN KEY (nomination_id)
      REFERENCES nomination (nomination_id) MATCH FULL
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT article_fk FOREIGN KEY (article_id)
      REFERENCES article (article_id) MATCH FULL
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

-- ВСТАВКА ДАННЫХ В ТАБЛИЦУ
INSERT INTO author (name, age)
VALUES
('qwerty', 28),
('reanno', 46),
('ivan334', 32),
('apple', 21),
('wind23', 23);

INSERT INTO article (title, text, created_on, author_id)
VALUES
('Stream API', 'Статья про Stream API', '2017-10-19 10:23', 1),
('Lambda', 'Статья про Lambda', '2019-03-27 16:33', 1),
('Java 13', 'Статья про Java 13', '2019-11-28 17:10', 2),
('Garbage Collectors', 'Статья про GC', '2019-08-07 11:55', 2),
('Hibernate', 'Статья про Hibernate', '2018-12-01 21:30', 2),
('Collections API', 'Collections API', '2019-11-22 22:29', 3);

INSERT INTO nomination (name)
VALUES
('Java 8'),
('Базы Данных'),
('Функциональное Программирование Java');

INSERT INTO nomination_article (nomination_id, article_id, rating)
VALUES
(1, 2, 'first'),
(1, 1, 'third'),
(2, 5, 'third'),
(3, 2, 'first'),
(3, 6, 'third');

--ПОЛУЧЕНИЕ ДАННЫХ ИЗ ТАБЛ.
--ВСЕ ЗАПИСИ
SELECT * FROM author;
-- ОПРЕДЕЛЕННЫЕ СТОЛБЦЫ
SELECT title, created_on
FROM article ORDER BY created_on;  //ORDER BY  -сортировка по столбцу created_on

-- СТРОКИ
-- = < > <= >= !=  -для сравнения/условия
SELECT * FROM article
WHERE author_id = 2; //(вывести строки где author_id = 2)

-- BETWEEN ... AND

SELECT title, created_on FROM article
WHERE EXTRACT(YEAR FROM created_on) // получим год из столбца created_on
BETWEEN 2015 AND 2018; // выводимый год д.б от 2015 до 2018

-- AND OR NOT
SELECT title FROM article
WHERE author_id = 1
AND created_on > '2018-12-12';// ищет записи с author_id = 1 созданные после 2018-12-12

SELECT title FROM article
WHERE author_id = 1
OR created_on > '2018-12-12';// ищет записи с author_id = 1 или созданные после 2018-12-12

-- IN(val1, val2, val3)
SELECT * FROM article
WHERE author_id IN(2, 3, 34;// вывести записи с author_id = 2, 3, 34

SELECT * FROM article
WHERE author_id NOT IN(2, 3, 34);//вывести записи кроме тех у которых author_id = 2, 3, 34

-- LIKE %Py / on% / %or%
SELECT * FROM article
WHERE text LIKE '%про%';  // % -любые символы  // выводит строки в которых текст содержит указанные сочетания символов

-- среднее AVG
SELECT CEIL(AVG(age)) as avg_age
FROM author;

SELECT * FROM author
WHERE age (SELECT AVG (age) FROM author);// вложенный запрос

-- MIN MAX

SELECT MIN(age) as min_age
FROM author;

SELECT * FROM author
WHERE age = (SELECT MAX(age) FROM author); // имя автора с максимальным возрастом

SELECT count (title) as count_article
FROM article;

SELECT count(article.title) as art_count,
author.name
FROM author, article
WHERE author.author_id = article.author_id
GROUP BY author.author_id;// посчитать сколько у каждого автора статей

--JOIN объединение(INNER -опред. совпадения по всем табл)
SELECT auth.name, art.title
FROM author auth
INNER JOIN article art
ON auth.author_id = art.author_id;// какой автор какую статью написал


-- RIGH LEFT JOIN
SELECT auth.name, art.title
FROM author auth
RIGHt JOIN article art
ON auth.author_id = art.author_id;

SELECT auth.name, art.title
FROM author auth
LEFT JOIN article art
ON auth.author_id = art.author_id; // с LEFT  будут null в графе title

SELECT auth.name, art.title
FROM author auth
LEFT JOIN article art
ON auth.author_id = art.author_id
WHERE art.title IS NULL;// выведет всех авторов у которых нет статей (title = null)

-- имена авторов чьи статьи заняли первое место

-- названия статей из номинации с id 1
SELECT nomination.name
FROM nomination
INNER JOIN

-- названия и дата статей, занявших первое место

-- названия статей не занявших никаких мест в номинациях



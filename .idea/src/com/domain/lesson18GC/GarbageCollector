heap (куча) для хранения объектов
Для объекта хранится:
    Заголовок
    Память для примитивных свойств
    Память для ссылочных свойств

Выделение памяти в опциях VM
-Xms<size>[k|m|G] исх размер кучи
-Xmx<size>[k|m|G] макс. размер кучи
-Xss<size>[k|m|G] размер стека вызовов метода

System.gc() - вызов сборщика мусора (но не факт что он запустится - решение принимает VM
дает инфу по размеру общ и свободной памяти (в байтах):
    long totalMemory = Runtime.getRuntime().totalMemory();
    long freeMemory = Runtime.getRuntime().freeMemory();

-verbose:gs -Xlog:gc*:file.txt -Xlog:gc* -логгирование

Сборщики мусора

Serial GC -последовательный сборщик мусора
     Stop-The-World (когда он работает работа программы прерывается )
     разбивает объекты на группы:
         Eden -молодое поколение
         Survivor- выжившие после сборки мусора объекты
         Tenured  -старшее поколение
      Eden -Survivor1-Survivor2 | Tenured
  можно принудительно включить: -XX:+UseSerialGC


Parallel GC параллельный сборщик мусора
Stop-The-World (когда он работает работа программы прерывается )
полезен для машин с несколькими процессорами
Для машин с N процессорами создает N потоков для N < 8 и  целую часть от 5N/8 для  N >= 8

    Tenured  | Eden -Survivor1-Survivor2
    увеличивает размеры областе1 на 20% уменьшает на 5%

    можно принудительно включить:
    -XX:+UseParallelGC
    задать максимальное время пауз при сборке:
    -XX:MaxGCPauseMillis=<N>
    процент времени выполнения GC от общего времени работы приложения:
    -XX:GCTime Ratio=<N>
    для шага увеличения размера молдого поколения (в %)
    -XX:YoungGenerationSizeIncrement=<T>
    для шага увеличения размера старшего поколения
    -XX:TenuredGenerationSizeIncrement=<T> (в %)
    - Для шага уменьшения размеров поколения, где процент уменьшения размера поколения вычисляется по формуле X/D,
    (X — процент увеличения размера поколения, D — значение параметра -XX:AdaptiveSizeDecrementScaleFactor
     -XX:AdaptiveSizeDecrementScaleFactor=<D>

G1 (Garbage First) GC java 9 - для многопроцессорных машин с большим количеством памяти
для каких- то опреаций очистки мусора программа приостанавливается для каких-то -нет, работая параллельно с осн. программой( напр. для Eden )
если памяти не хватает - начинает работат с Survivor а потом и с Tenured
     Eden | | Survivor | Tenured


Параллельный G1 GC java10

        Eden | | Survivor | Tenured
                -XX:+UseG1GC - включение
                -XX:MaxGCPauseMillis=<N> - указывает G1, что в ходе отдельно взятой сборки необходимо избегать пауз дольше N мс
                -XX:GCPauseIntervalMillis=<N> - указывает G1, что между сборками мусора должно проходить не менее N мс
                -XX:G1HeapRegionSize=<size> [k|m|G]  - размер региона
                разбивает кучу на молодое и старое поколения.
                -XX:ParallelGCThreads=<N> - позволит настраивать количество потоков



        Таблица опций для JDK <= 8
        http://www.izebit.ru/2016/03/jvm-gc-parameters.html?m=1










